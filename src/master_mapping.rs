use super::decode_data::*;
use super::data::Data;

pub struct MessageInfo {
    pub description: String,
    pub decoder: fn(data: &[u8]) -> Vec<Data>,
}

impl MessageInfo {
    pub fn new(description: String, decoder: fn(data: &[u8]) -> Vec<Data>) -> Self {
        Self {
            description,
            decoder,
        }
    }
}

// Mapping from external message ID to decoding information
pub fn get_message_info(id: &u32) -> MessageInfo {
    match id {
        1 => MessageInfo::new("accumulator status".to_string(), decode_accumulator_status),
        2 => MessageInfo::new("BMS status".to_string(), decode_bms_status),
        3 => MessageInfo::new("shutdown control".to_string(), decode3),
        4 => MessageInfo::new("cell data".to_string(), decode_cell_voltages),
        160 => MessageInfo::new(
            "temperatures (igbt modules, gate driver board)".to_string(),
            decode5,
        ),
        161 => MessageInfo::new("temperatures (control board)".to_string(), decode6),
        162 => MessageInfo::new("temperatures (motor)".to_string(), decode7),
        163 => MessageInfo::new("analog input voltages".to_string(), decode8),
        164 => MessageInfo::new("digital input status".to_string(), decode9),
        165 => MessageInfo::new("motor position information".to_string(), decode10),
        166 => MessageInfo::new("Current information".to_string(), decode11),
        167 => MessageInfo::new("Voltage Information".to_string(), decode12),
        168 => MessageInfo::new("Flux Information".to_string(), decode13),
        169 => MessageInfo::new("Internal Voltages".to_string(), decode14),
        170 => MessageInfo::new("Internal States".to_string(), decode15),
        171 => MessageInfo::new("Fault Codes".to_string(), decode16),
        172 => MessageInfo::new("Torque and Timer Decoder".to_string(), decode17),
        192 => MessageInfo::new("Command Data".to_string(), decode18),
        514 => MessageInfo::new("Current Limits".to_string(), decode19),
        768 => MessageInfo::new(
            "NERduino Accelerometer".to_string(),
            decode_accelerometer_data,
        ),
        769 => MessageInfo::new("NERduino Humidity".to_string(), decode21),
        7 => MessageInfo::new("Cell Voltages".to_string(), decode_mock),
        193 => MessageInfo::new("Unknown 1".to_string(), decode_mock),
        6 => MessageInfo::new("Unknown 2".to_string(), decode_mock),
        194 => MessageInfo::new("Unknown 3".to_string(), decode_mock),
        1744 => MessageInfo::new("Unknown 4".to_string(), decode_mock),
        1745 => MessageInfo::new("Unknown 5".to_string(), decode_mock),
        175 => MessageInfo::new("Unknown 6".to_string(), decode_mock),
        770 => MessageInfo::new("GLV Current".to_string(), decode29),
        2015 => MessageInfo::new("Unknown 2015".to_string(), decode_mock),
        2027 => MessageInfo::new("Unknown 2027".to_string(), decode_mock),
        2019 => MessageInfo::new("Unknown 2019".to_string(), decode_mock),
        771 => MessageInfo::new("Strain Gauge".to_string(), decode34),
        1024 => MessageInfo::new("Wheel State".to_string(), decode35),
        10 => MessageInfo::new("MPU States".to_string(), decode_mpu_dashboard_info),
        772 => MessageInfo::new("GPS Data 1".to_string(), decode_gps_1),
        773 => MessageInfo::new("GPS Data 2".to_string(), decode_gps_2),
        774 => MessageInfo::new("GPS Data 3".to_string(), decode_gps_3),
        8 => MessageInfo::new("Cell Temperatures".to_string(), decode_cell_temps),
        9 => MessageInfo::new("Segment Temperatures".to_string(), decode_segment_temps),
        775 => MessageInfo::new("Logging Status".to_string(), decode_logging_status),
        1025 => MessageInfo::new("LV Battery 1".to_string(), decode_lv_battery_1),
        1026 => MessageInfo::new("LV Battery 2".to_string(), decode_lv_battery_2),
        _ => MessageInfo::new("Unknown".to_string(), decode_mock),
    }
}

//Unused Data Ids Implementation in rust
/*
pub struct DataInfo {
    name: String,
    units: String,
}

impl DataInfo {
    pub fn new(name: String, units: String) -> Self {
        Self { name, units }
    }
}

// maps from data id to DataInfo containing the name of the data and its units
pub fn get_data_info(id: u8) -> DataInfo {
    match id {
        0 =>  DataInfo::new("Mock Data".to_string(), "".to_string()),
        1 =>  DataInfo::new("Pack Inst Voltage".to_string(), "V".to_string()),
        2 =>  DataInfo::new("Pack Current".to_string(), "A".to_string()),
        3 =>  DataInfo::new("Pack Amphours".to_string(), "Ah".to_string()),
        4 =>  DataInfo::new("Pack SOC".to_string(), "%".to_string()),
        5 =>  DataInfo::new("Pack Health".to_string(), "%".to_string()),
        6 =>  DataInfo::new("Failsafe Statuses".to_string(), "HEX".to_string()),
        7 =>  DataInfo::new("DTC Status 1".to_string(), "HEX".to_string()),
        8 =>  DataInfo::new("DTC Status 2".to_string(), "HEX".to_string()),
        9 =>  DataInfo::new("Current Limits Status".to_string(), "".to_string()),
        10 =>  DataInfo::new("Average Temp".to_string(), "C".to_string()),
        11 =>  DataInfo::new("Internal Temp".to_string(), "C".to_string()),
        12 =>  DataInfo::new("MPE State".to_string(), "BIN".to_string()),
        13 =>  DataInfo::new("High Cell Voltage".to_string(), "V".to_string()),
        14 =>  DataInfo::new("High Cell Voltage ID".to_string(), "".to_string()),
        15 =>  DataInfo::new("Low Cell Voltage".to_string(), "V".to_string()),
        16 =>  DataInfo::new("Low Cell Voltage ID".to_string(), "".to_string()),
        17 =>  DataInfo::new("Average Cell Voltage".to_string(), "V".to_string()),
        18 =>  DataInfo::new("Module A Temperature".to_string(), "C".to_string()),
        19 =>  DataInfo::new("Module B Temperature".to_string(), "C".to_string()),
        20 =>  DataInfo::new("Module C Temperature".to_string(), "C".to_string()),
        21 =>  DataInfo::new("Gate Driver Board Temperature".to_string(), "C".to_string()),
        22 =>  DataInfo::new("Control Board Temperature".to_string(), "C".to_string()),
        23 =>  DataInfo::new("RTD #1 Temperature".to_string(), "C".to_string()),
        24 =>  DataInfo::new("RTD #2 Temperature".to_string(), "C".to_string()),
        25 =>  DataInfo::new("RTD #3 Temperature".to_string(), "C".to_string()),
        26 =>  DataInfo::new("RTD #4 Temperature".to_string(), "C".to_string()),
        27 =>  DataInfo::new("RTD #5 Temperature".to_string(), "C".to_string()),
        28 =>  DataInfo::new("Motor Temperature".to_string(), "C".to_string()),
        29 =>  DataInfo::new("Torque Shudder".to_string(), "N-m".to_string()),
        30 =>  DataInfo::new("Analog Input 1".to_string(), "V".to_string()),
        31 =>  DataInfo::new("Analog Input 2".to_string(), "V".to_string()),
        32 =>  DataInfo::new("Analog Input 3".to_string(), "V".to_string()),
        33 =>  DataInfo::new("Analog Input 4".to_string(), "V".to_string()),
        34 =>  DataInfo::new("Analog Input 5".to_string(), "V".to_string()),
        35 =>  DataInfo::new("Analog Input 6".to_string(), "V".to_string()),
        36 =>  DataInfo::new("Digital Input 1".to_string(), "BIN".to_string()),
        37 =>  DataInfo::new("Digital Input 2".to_string(), "BIN".to_string()),
        38 =>  DataInfo::new("Digital Input 3".to_string(), "BIN".to_string()),
        39 =>  DataInfo::new("Digital Input 4".to_string(), "BIN".to_string()),
        40 =>  DataInfo::new("Digital Input 5".to_string(), "BIN".to_string()),
        41 =>  DataInfo::new("Digital Input 6".to_string(), "BIN".to_string()),
        42 =>  DataInfo::new("Digital Input 7".to_string(), "BIN".to_string()),
        43 =>  DataInfo::new("Digital Input 8".to_string(), "BIN".to_string()),
        44 =>  DataInfo::new("Motor Angle Electrical".to_string(), "Deg".to_string()),
        45 =>  DataInfo::new("Motor Speed".to_string(), "RPM".to_string()),
        46 =>  DataInfo::new("Electrical Output Frequency".to_string(), "Hz".to_string()),
        48 =>  DataInfo::new("Phase A Current".to_string(), "A".to_string()),
        49 =>  DataInfo::new("Phase B Current".to_string(), "A".to_string()),
        50 =>  DataInfo::new("Phase C Current".to_string(), "A".to_string()),
        51 =>  DataInfo::new("DC Bus Current".to_string(), "A".to_string()),
        52 =>  DataInfo::new("DC Bus Voltage".to_string(), "V".to_string()),
        53 =>  DataInfo::new("Output Voltage".to_string(), "V".to_string()),
        54 =>  DataInfo::new("VAB_Vd Voltage".to_string(), "V".to_string()),
        55 =>  DataInfo::new("VBC_Vq Voltage".to_string(), "V".to_string()),
        56 =>  DataInfo::new("Flux Command".to_string(), "Wb".to_string()),
        57 =>  DataInfo::new("Flux Feedback".to_string(), "wb".to_string()),
        58 =>  DataInfo::new("Id Feedback".to_string(), "A".to_string()),
        59 =>  DataInfo::new("Iq Feedback".to_string(), "A".to_string()),
        60 =>  DataInfo::new("1.5V Reference Voltage".to_string(), "V".to_string()),
        61 =>  DataInfo::new("2.5V Reference Voltage".to_string(), "V".to_string()),
        62 =>  DataInfo::new("5.0V Reference Voltage".to_string(), "V".to_string()),
        63 =>  DataInfo::new("12V System Voltage".to_string(), "V".to_string()),
        64 =>  DataInfo::new("VSM State".to_string(), "".to_string()),
        65 =>  DataInfo::new("Inverter State".to_string(), "".to_string()),
        66 =>  DataInfo::new("Relay State".to_string(), "BIN".to_string()),
        67 =>  DataInfo::new("Inverter Run Mode".to_string(), "BIN".to_string()),
        68 => {
             DataInfo::new(
                "Inverter Active Discharge State".to_string(),
                "BIN".to_string(),
            )
        }
        69 =>  DataInfo::new("Inverter Command Mode".to_string(), "BIN".to_string()),
        70 =>  DataInfo::new("Inverter Enable State".to_string(), "BIN".to_string()),
        71 =>  DataInfo::new("Inverter Enable Lockout".to_string(), "BIN".to_string()),
        72 =>  DataInfo::new("Direction Command".to_string(), "BIN".to_string()),
        73 =>  DataInfo::new("BMS Active".to_string(), "BIN".to_string()),
        74 =>  DataInfo::new("BMS Limiting Torque".to_string(), "BIN".to_string()),
        75 =>  DataInfo::new("POST Fault Lo".to_string(), "BIN".to_string()),
        76 =>  DataInfo::new("POST Fault Hi".to_string(), "BIN".to_string()),
        77 =>  DataInfo::new("Run Fault Lo".to_string(), "BIN".to_string()),
        78 =>  DataInfo::new("Run Fault Hi".to_string(), "BIN".to_string()),
        79 =>  DataInfo::new("Commanded Torque".to_string(), "N-m".to_string()),
        80 =>  DataInfo::new("Torque Feedback".to_string(), "N-m".to_string()),
        81 =>  DataInfo::new("Power on Timer".to_string(), "s".to_string()),
        82 =>  DataInfo::new("Torque Command".to_string(), "N-m".to_string()),
        83 =>  DataInfo::new("Speed Command".to_string(), "RPM".to_string()),
        84 =>  DataInfo::new("Direction Command".to_string(), "BIN".to_string()),
        85 =>  DataInfo::new("Inverter Enable".to_string(), "BIN".to_string()),
        86 =>  DataInfo::new("Inverter Discharge".to_string(), "BIN".to_string()),
        87 =>  DataInfo::new("Speed Mode Enable".to_string(), "BIN".to_string()),
        88 =>  DataInfo::new("Commanded Torque Limit".to_string(), "N-m".to_string()),
        89 =>  DataInfo::new("Pack DCL".to_string(), "A".to_string()),
        90 =>  DataInfo::new("Pack CCL".to_string(), "A".to_string()),
        91 =>  DataInfo::new("TCU X-Axis Acceleration".to_string(), "g".to_string()),
        92 =>  DataInfo::new("TCU Y-Axis Acceleration".to_string(), "g".to_string()),
        93 =>  DataInfo::new("TCU Z-Axis Acceleration".to_string(), "g".to_string()),
        94 =>  DataInfo::new("TCU Temperature C".to_string(), "C".to_string()),
        95 =>  DataInfo::new("TCU Temperature F".to_string(), "F".to_string()),
        96 =>  DataInfo::new("Relative Humidity".to_string(), "%".to_string()),
        97 =>  DataInfo::new("Cell Voltage Info".to_string(), "".to_string()),
        98 =>  DataInfo::new("GLV Current".to_string(), "A".to_string()),
        99 =>  DataInfo::new("Strain Gauge Voltage 1".to_string(), "V".to_string()),
        100 =>  DataInfo::new("Strain Gauge Voltage 2".to_string(), "V".to_string()),
        101 =>  DataInfo::new("Vehicle Speed".to_string(), "MPH".to_string()),
        102 =>  DataInfo::new("Wheel Knob 1".to_string(), "".to_string()),
        103 =>  DataInfo::new("Wheel Knob 2".to_string(), "".to_string()),
        104 =>  DataInfo::new("Wheel Buttons".to_string(), "".to_string()),
        105 =>  DataInfo::new("MPU Mode State".to_string(), "".to_string()),
        106 =>  DataInfo::new("BMS State".to_string(), "".to_string()),
        107 =>  DataInfo::new("BMS Faults".to_string(), "HEX".to_string()),
        108 =>  DataInfo::new("Latitude".to_string(), "Deg".to_string()),
        109 =>  DataInfo::new("Longitude".to_string(), "Deg".to_string()),
        110 =>  DataInfo::new("GPS Fix Status".to_string(), "".to_string()),
        111 =>  DataInfo::new("Altitude".to_string(), "m".to_string()),
        112 =>  DataInfo::new("Ground Speed".to_string(), "m/s".to_string()),
        113 =>  DataInfo::new("Heading Direction".to_string(), "Deg".to_string()),
        114 =>  DataInfo::new("High Cell Temp".to_string(), "C".to_string()),
        115 =>  DataInfo::new("High Cell Temp Chip Number".to_string(), "".to_string()),
        116 =>  DataInfo::new("High Cell Temp Cell Number".to_string(), "".to_string()),
        117 =>  DataInfo::new("Low Cell Temp".to_string(), "C".to_string()),
        118 =>  DataInfo::new("Low Cell Temp Chip Number".to_string(), "".to_string()),
        119 =>  DataInfo::new("Low Cell temp Cell Number".to_string(), "".to_string()),
        120 =>  DataInfo::new("Average Cell Temp".to_string(), "C".to_string()),
        121 =>  DataInfo::new("High Cell Voltage Chip Number".to_string(), "".to_string()),
        122 =>  DataInfo::new("High Cell Voltage Cell Number".to_string(), "".to_string()),
        123 =>  DataInfo::new("Low Cell Voltage Chip Number".to_string(), "".to_string()),
        124 =>  DataInfo::new("Low Cell Voltage Cell Number".to_string(), "".to_string()),
        125 =>  DataInfo::new("Segment 1 Average Temperature".to_string(), "C".to_string()),
        126 =>  DataInfo::new("Segment 2 Average Temperature".to_string(), "C".to_string()),
        127 =>  DataInfo::new("Segment 3 Average Temperature".to_string(), "C".to_string()),
        128 =>  DataInfo::new("Segment 4 Average Temperature".to_string(), "C".to_string()),
        129 =>  DataInfo::new("Logging Status".to_string(), "".to_string()),
        130 =>  DataInfo::new("Accumulator Fan Percentage".to_string(), "%".to_string()),
        131 =>  DataInfo::new("Motor Fan Percentage".to_string(), "%".to_string()),
        132 =>  DataInfo::new("Torque Limit Percentage".to_string(), "%".to_string()),
        133 =>  DataInfo::new("Regen Strength value".to_string(), "".to_string()),
        134 =>  DataInfo::new("Carger State".to_string(), "".to_string()),
        135 =>  DataInfo::new("Measurement System Valid".to_string(), "".to_string()),
        136 =>  DataInfo::new("System Status".to_string(), "".to_string()),
        137 =>  DataInfo::new("Charge Status".to_string(), "".to_string()),
        138 =>  DataInfo::new("ibat".to_string(), "A".to_string()),
        139 =>  DataInfo::new("vbat".to_string(), "V".to_string()),
        140 =>  DataInfo::new("vin".to_string(), "V".to_string()),
        141 =>  DataInfo::new("vsys".to_string(), "V".to_string()),
        142 =>  DataInfo::new("iin".to_string(), "A".to_string()),
        143 =>  DataInfo::new("Cell Burning Status".to_string(), "".to_string()),
        144 =>  DataInfo::new("Traction Control On".to_string(), "".to_string()),
        145 =>  DataInfo::new("Precharge State".to_string(), "".to_string()),
        146 =>  DataInfo::new("BMS Prefault Status".to_string(), "".to_string()),
        _ =>  DataInfo::new("".to_string(), "".to_string()),
    }
}
*/
